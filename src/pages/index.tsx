import Head from 'next/head'
import { Header } from '@/components/Header'
import { Footer } from '@/components/Footer'
import type { NextPage } from 'next'
import { ChangeEvent, useState } from 'react'
import toast from 'react-hot-toast'
import Balancer from 'react-wrap-balancer'
import { useLocalStorage } from '@/hooks'

const Home: NextPage = () => {
  const [loading, setLoading] = useState(false)
  const [summary, setSummary] = useState<string>('')
  const [transcript, setTranscript] = useState<string>('')
  const [key, setKey] = useState<string>('')
  const [file, setFile] = useState<File | null>(null)
  const [storedAPIKey, setAPIKey] = useLocalStorage<string>(
    'OPENAI_API_KEY',
    ''
  )

  const handleFileSelect = (event: ChangeEvent<HTMLInputElement>) => {
    setFile(event.currentTarget.files?.[0] || null)
  }

  const generate = async () => {
    if (!storedAPIKey) {
      return toast.error('API key is not set')
    }
    if (!file) return
    setLoading(true)
    setSummary('')
    setTranscript('')
    const formData = new FormData()
    formData.append('file', file)
    formData.append('model', 'whisper-1')
    try {
      const transcriptionsResponse = await fetch(
        `https://api.openai.com/v1/audio/transcriptions`,
        {
          method: 'POST',
          headers: {
            Authorization: `Bearer ${storedAPIKey}`,
          },
          body: formData,
        }
      )

      const transcriptions = await transcriptionsResponse.json()

      if (!transcriptionsResponse.ok) {
        throw new Error(transcriptions.error.message)
      }

      const q = `summarize the text below:\n${transcriptions.text}`

      const completionsResponse = await fetch(
        `https://api.openai.com/v1/chat/completions`,
        {
          method: 'POST',
          headers: {
            Authorization: `Bearer ${storedAPIKey}`,
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            model: 'gpt-3.5-turbo',
            messages: [{ role: 'user', content: q }],
          }),
        }
      )

      const completions = await completionsResponse.json()

      if (completionsResponse.ok) {
        setSummary(completions.choices[0].message.content)
      }

      setTranscript(transcriptions.text)
    } catch (e: any) {
      toast.error(e.message || 'Something went wrong')
    }
    setLoading(false)
  }

  return (
    <div className='flex max-w-5xl mx-auto flex-col py-2 min-h-screen'>
      <Head>
        <title>Audio Summary With ChatGPT</title>
        <meta name='description' content='Generated by create next app' />
        <meta name='viewport' content='width=device-width, initial-scale=1' />
      </Head>
      <Header />
      <div className='flex flex-col items-center flex-1'>
        <input
          type='file'
          className='file-input w-full max-w-xs mt-6'
          onChange={handleFileSelect}
        />
        <button
          className={`btn mt-6 ${loading ? 'loading' : ''}`}
          onClick={generate}
          disabled={loading || !file}
        >
          Generate Summary & Transcript
        </button>
        <div className='flex flex-row justify-around w-full gap-6'>
          {transcript ? (
            <section className='m-6'>
              <h3 className='font-bold'>Transcript</h3>
              <Balancer className='mt-6'>{transcript}</Balancer>
            </section>
          ) : null}
          {summary ? (
            <section className='m-6'>
              <h3 className='font-bold'>Summary</h3>
              <Balancer className='mt-6'>{summary}</Balancer>
            </section>
          ) : null}
        </div>
      </div>
      <div>
        <input type='checkbox' id='key-modal' className='modal-toggle' />
        <div className='modal'>
          <div className='modal-box'>
            <h3 className='font-bold text-lg'>OpenAI API Key</h3>
            <h5 className='text-sm mt-2'>
              Your key is stored locally in the browser.
            </h5>
            <p className='py-4'>
              <input
                type='password'
                placeholder='Type here'
                className='input w-full input-bordered'
                onChange={(e) => setKey(e.target.value)}
              />
            </p>
            <div className='modal-action'>
              <label
                htmlFor='key-modal'
                className='btn'
                onClick={() => setAPIKey(key)}
              >
                Save
              </label>
            </div>
          </div>
        </div>
      </div>
      <Footer />
    </div>
  )
}

export default Home
